include:
  - project: $PROJECT_TEMPLATES_GITLABCI_PATH
    ref: develop
    file: '.gitlab-ci-java-basic.yml'

# --------------------------------------
# Variables
# --------------------------------------
variables:
  # Docker
  DOCKER_IMAGE: $DOCKER_URL/maven:3.8.6-openjdk-11
  SONARQUBE_QUALITYGATE_WAIT: 'true'
  SECURITY_MONITORING: 'true'

# --------------------------------------
# Tags
# --------------------------------------
default:
  tags:
    - 'for:application-project'
    - 'host:restricted-container'
    - 'net:soca4-dev'

# Analyse SonarQube du code avec Maven sans dépendance sur d'autres jobs.
# Le projet est donc buildé avant l'analyse.
sonarqube_2: &sonarqube_maven_no_dependency
  stage: build
  image: $SONAR_DOCKER_IMAGE_MAVEN
  variables:
    GIT_DEPTH: 0 # Tells git to fetch all the branches of the project, required by the analysis task
    SONARQUBE_QUALITYGATE_WAIT: 'true'
  before_script:
    - !reference [.sonarqube_print_conf, script]
    - !reference [.sonarqube_before_script_custom, script]
  script:
    - mvn -s $MAVEN_SETTINGS_FILE $MAVEN_CLI_OPTS $MAVEN_CLI_OPTS_CUSTOM clean package $MAVEN_SKIP_TESTS
    - mvn -s $MAVEN_SETTINGS_FILE $MAVEN_CLI_OPTS $MAVEN_CLI_OPTS_CUSTOM 
      $SONAR_MAVEN_GOAL 
      -Dsonar.gitlab.project_id=$CI_PROJECT_PATH 
      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME 
      -Dsonar.qualitygate.wait=$SONARQUBE_QUALITYGATE_WAIT 
      -Dsonar.java.binaries=$SONAR_JAVA_BINARIES 
      -Dsonar.log.level=$SONARQUBE_LOG_LEVEL 
      -Dsonar.projectName=$SONAR_PROJECT_NAME 
      ${SONAR_PROJECT_KEY:+-Dsonar.projectKey=$SONAR_PROJECT_KEY} 
      ${SONAR_NODEJS_EXECUTABLE_PATH:+-Dsonar.nodejs.executable=$SONAR_NODEJS_EXECUTABLE_PATH} 
    - |
      VAL1=`curl -k -v --request GET "https://sonarqube.devops.etat-ge.ch/sonarqube/api/measures/component?component=ch.ge.cti.composant%3AgitSync&metricKeys=new_security_review_rating" --header "Authorization: Bearer $SONAR_TOKEN"`
    - echo $VAL1
    - VAL1_STRING=`jq '.component.measures.period.value' <<< $VAL1`
    - VAL1_NUMBER=$(($VAL1+0))
    - echo $VAL1_NUMBER
  interruptible: true
  dependencies: []
  rules:
    - !reference [.sonarqube_rules_sonar_enabled, rules]
    - !reference [.sonarqube_rules_custom, rules]
  retry:
    max: 2
    when: 
      - runner_system_failure
      - scheduler_failure



sonarqube_3: &sonarqube_maven_no_dependency
  stage: build
  image: $SONAR_DOCKER_IMAGE_MAVEN
  variables:
    GIT_DEPTH: 0 # Tells git to fetch all the branches of the project, required by the analysis task
    SONARQUBE_QUALITYGATE_WAIT: 'true'
    SONAR_DOCKER_IMAGE_MAVEN: oci-snapshot.devops.etat-ge.ch/ch/ge/cti/build/ubi-jdk-maven-node:U9.4-J21-M3.9.9-N20.19.1
  before_script:
    - !reference [.sonarqube_print_conf, script]
    - !reference [.sonarqube_before_script_custom, script]
  script:
    - |
      VAL1=`curl -k -v --request GET "https://sonarqube.devops.etat-ge.ch/sonarqube/api/measures/component?component=ch.ge.cti.composant%3AgitSync&metricKeys=new_security_review_rating" --header "Authorization: Bearer $SONAR_TOKEN"`
    - echo $VAL1
    - MESURE1=`jq '.component.measures[].period.value' <<< $VAL1`
    - echo $MESURE1
    - LIMIT1="0" 
    - ASSERT1=`echo | awk '{if ($MESURE1 > 0.0) {print "True"} else {print "False"} }'`
    - echo $ASSERT1
    - |
      if [[ $ASSERT1 == 'True' ]]
      then
        echo "true"
        exit 1
      else
        echo "false"
      fi
  interruptible: true
  dependencies: []
  rules:
    - !reference [.sonarqube_rules_sonar_enabled, rules]
    - !reference [.sonarqube_rules_custom, rules]
  retry:
    max: 2
    when: 
      - runner_system_failure
      - scheduler_failure
